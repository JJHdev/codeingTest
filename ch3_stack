1. 스택은 쌓는다로 선입 후출이며 삽입을 push 꺼내는것을 pop 이라고 한다. 
2. 파이썬에서는 스택을 제공하진 않지만 대안으로 리스트 메서드인 append(), push() 메서드로 스택을 대체할수 있다.
3. 스택의 ADT에는 push() , pop(), IsEmpty() IsFull() , top(마지막 삽입데이터 주소) 로 구성되어 있다.

4. 스택에서 push를 수행하면 IsFull를 호출하여 데이터가 가득찾는지 확인하고 가득 차지 않았을 경우 top을 1만큼 증가 시킨 후 그 위치에 data[마지막데이터 + 1] 에 데이터를 넣는다.

5. 스택에서 pop를 수행하면 IsEmpty를 수행하여 배열에 데이터가 없는건 아닌지 확인한다. 데이터가 있으면 top을 1만큼 감소시키고 마지막 데이터를 반환한다. 

6. 실제로 파이썬에서는 스택개념이 없어 append와 pop을 이용해서 구현한다.
  -.  arr = []
  -.  arr.append(1)
  -.  arr2 = arr.pop()
  -. stack_size =  len(arr2)

7. 실제로 구현중 나온 내용
  -. decimal //= 2 >>>>>>>> deciaml을 2로 나누고 나온 값을 decimal에 재할당
  -. while stack:
        binary += stack.pop() 은 후입 선출이다.

8. 
def solution(s):
  answer = 0
  n = len(s)
  for i in range(n):
    stack = []
    for j in range(n):
      c = s[( I + J) % n]
    if c == "(" or c == "{" or c == "[":
      stack.append(c)
    else:
      if not stack:
        break

위와 같은 구조는 s에 대해서  0 - 0 , 0 - 1, 0 -2 , 1 - 0, 1 - 1, 1 - 2 같은 구조로 돌아간다. 


def solution(board, move):
  lens = [[] for _ in range(len(board[0]))]

  for i in range(len(board) -1 , -1 , -1 )
    for j in range(len(board[0])):
      if board[i][j]:
        lens[j].append(board[i][j])

2차원 배열에서 역순으로 각 첫번째 열을 1행으로 저장하는 알고리즘



def solution(n,k,cmd):
  deleted = []
  up = [i -1 for i in range(n+2)]
  down = [i + 1 for i in rnage(n+1)]

  k += 1

  for cmd_i in cmd:
    if cmd_i.startswith("C"):
      deleted.append(k)
      up[down[k]] = up[k]
      down[up[k]] = down[k]
      k = up[k] if n < down[k] else down[k]

    elif cmd_i.startswith("Z"):
      restore = deleted.pop()
      down[up[restore]] = restore
      up[down[restore]] = restore

    else:
      action, num = cmd_i.split()
      if action == "U":
        for _ in ragne(int(num)):
          k = up[k]
      else:
        for _ in range(int(num)):
          k = down[k]

    answer = [O] * n
    for i in deleted:  
      answer[i-1] = "X"
    return "".join(answer)
    

파이썬에서 삼항연산자 >> 참일 때 값 if 조건 else 거짓일 때 값
    
