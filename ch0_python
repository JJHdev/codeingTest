1. 얕은 복사
  -.  a = [1, 2, 3]
      a = b
      b[2] = 5
      print(a) # [1, 2, 5]
    이것은 얕은복사로 a와 b가 서로 가리키는 주소가 같아서 b를 수정해도 a가 수정된다.

    tip => 얕은 복사 방법으로는 
        1. =를 이용한 복사 
          -. a = b
        2. copy.copy를 이용한 복사
          -. c = copy.copy(a) 통해 할수 있다.

2. 깊은 복사
  -. 새로운 주소로 복사하는것 
  -. copy.deepcopy()를 이용하여 복사  
     a = [1,2,3]
     c = copy.deepcopy(a)

3. 얕은 복사와 깊은 복사 (복합)
  -. slicing을 이용한 객체자체는 복합적으로 작용된다. 
    a = [[1,2] [3,4]]
    b = a[:]
    print(id(a) == id(b)) False
    print(id(a[0] == id(b[0])) True
    a[1].append(5)
    =>> print(a) == print(b) # [[1,2] , [3,4,5]]

4. for문
  for i in range(5):
    print(i)

4-1. 리스트 컴프리헨션
  squares = [x**2 for x in range(10)]

5. while문   조건쪽에 True가 계속 되는한 계속 진행 
  while x < 5:
    print(x)
    x += 1

6. 리스트
number = [1,2,3,4,5]
number.append(6)

7. 딕셔너리
dic = {"name" : "Alice"}
print(dic["name"])
dic["location"] = "Seoul"

8. 슬라이싱 리스트[start(이상) : stop(미만) : step]
  numbers = [0,1,2,3,4,5,6,7,8,9]
  print(numbers[1:5])  # 1부터 4까지의 요소 [1, 2, 3, 4]
  print(numbers[:5])   # 처음부터 4까지의 요소 [0, 1, 2, 3, 4]
  print(numbers[5:])   # 5부터 끝까지의 요소 [5, 6, 7, 8, 9]
  print(numbers[::2])  # 전체 리스트에서 각 요소를 두 칸씩 건너뛰며 선택 [0, 2, 4, 6, 8]

9. sort() VS sorted()
  -. numbers = [4, 1, 3, 2]
    numbers.sort()  # [1,2,3,4]

  -. numbers = [4,1,3,2]
    sorted_numbers = sorted(numbers)
      
    print(sorted_numbers)  # 출력: [1, 2, 3, 4]
    print(numbers)  # 출력: [4, 1, 3, 2] 원본은 그대로

10. reverse
  numbers = [1, 2, 3, 4]
  numbers.reverse()
  print(numbers)  # 출력: [4, 3, 2, 1]

11. 문자열 뒤집기
  string = 'Welcome SJKOding!'
  print(string[::-1]) # '!gnidOKJS emocleW'

12 .중복자료 제거하기.
  temp = [1, 1, 2, 2, 3, 4, 4, 5]
  unique_elements_set = set(temp)  # {1, 2, 3, 4, 5}
  unique_elements_list = list(unique_elements_set)  # [1, 2, 3, 4, 5]
  print(unique_elements_list)  # [1, 2, 3, 4, 5]

13. 딕셔너리와 집합의 차이점 
  {}는 빈 딕셔너리를 나타냅니다. 하지만 요소를 포함하고 있을 때, 키와 값이 함께 있으면 딕셔너리로, 단일 요소만 있다면 집합으로 인식됩니다:

  python
  코드 복사
  # 요소를 포함하는 딕셔너리
  a_dict = {"key": "value", "another_key": "another_value"}
  
  # 요소를 포함하는 집합
  a_set = {"element1", "element2", "element3"}

  여기서 중요한 점은, {}를 사용해 비어 있는 경우, 이는 기본적으로 딕셔너리로 간주된다는 것입니다. 만약 빈 집합을 만들고 싶다면, set() 함수를 명시적으로 사용해야 합니다:
  
  python
  코드 복사
  empty_set = set()

14. 리스트원소들과 인덱스 번호를 동시에 가져오기
  temp = ['k', 'o', 'r', 'e', 'a']

  for idx, value in enumerate(temp):
	  print(idx, value)

15.  Queue 이용
  from collections import deque
  
  queue = deque([1, 2, 3, 4, 5])
  print(queue.popleft()) # 1
  print(list(queue))     # [2,3,4,5]

16. 길이가 같은 리스트 동시에 돌리기
  temp1 = [1, 3, 5]
  temp2 = [2, 4, 6]
  
  for n1, n2 in zip(temp1, temp2):
  	print(n1, n2)











