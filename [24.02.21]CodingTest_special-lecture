1. 문제를 보고 어떤 알고리즘을 적용해야 문제가 해결되는지??
  -. 어떤 알고리즘이 있는지 알아야한다. (ex) 가장 많이 나오는 것들은 구현/시뮬레이션, 완전탐색, 그래프DFS/BFS, 스택, 큐, 해시테이블, 우선순위큐, 다익스트라, DP, 문자열)
  -. 그래프DFS/BFS >> 그리드 형식으로 문제가 나온다. (table 모양이라 생각하면됨.)  / BFS는 최단거리를 구하는것, DPS는 완전탐색 
  -. 다익스트라 >> 가중치 그래프에서 각 노드까지의 최단시간 구하기.

2. 코테를 공부할떄 한 유형을 집중적으로 풀면서 계속 반복 누적 복습을 해야한다.

3. 삼성전자 코딩테스트 문제 유형은 >> SWexpertacademy, 백준 삼성전자 기출 보면 어떤 문제가 주로 나오는지 확인 가능

4. 양치기가 좋은가? >> 공부방법 ★★★★★★★★★★★★★★★★★
  -. 기본적인 알고리즘/자료구조 이해도를 높인다.
  -. 대표유형 문제 5번 정도씩 반복해서 풀기  >> 각 유형에 대해서 왜 이렇게 알고리즘이 작성되어있는지? 왜 이런 스텍을 쓰는지? 이해하면서 풀기 >> 완전히 이해 한 후
  -. 그 후에 양치기 하는 것이 좋다.

5. 각 유형별 대표문제는 이프런 강의 노션이 있는데 거기에 올려주겠다. (https://midi-mandolin-36f.notion.site/20240221-189bfe4aae0a4e6492957da12d9e9ca5?pvs=4)🤩🤩

6. www.nossi.dev 코딩테스트 자료구조 정리해놓은게 있으니 확인해서 공부하기.

7. 정확성 테스트에서 점수를 높이는 방법은?
  -. testCase를 예측 못해서 정확성 점수가 낮은건데, 글을 잘읽어봐야하는 문제다. 그리고 제약조건에서 끝의 값과 중복값등 있을 경우 생각과 방향성을 글을 읽으면서 계속 추려가야한다.

8. 문제 이해하기가 너무 오래걸릴 경우 어떻게 해야할지?
  -. 입출력을 먼저 보고 문제설명을 보는게 아주 약간이나마 도움이 될것이다.

9. 메소드를 어떻게 다 외우는지?
  -. 이건 양치기 하다보면 같은 함수만 사용하게 될 것이다. 그것을 5번 풀다보면 어느 순간 검색을 안하게 될 것이다.

10. 코딩테스트는 오래걸린다. 그러니까 오랜 시간동안 공부해야한다고 생각하며 꾸준히 해야한다.
  -. 코딩테스트 문제를 풀때 원래 3~4시간 걸린다. 그걸 계속 유형을 익히고, 반복적으로 학습하면서 시간을 줄여 나가야 하는것이다.

11. 2달동안 매일 5시간 공부?? 했는데도 삼성 코딩 50:50으로 합격 불합격 했었다. 그만큼 코딩테스트 공부기간은 긴 공부 이다.

12. 풀었던 문제를 다시 풀어보는게 좋을지??
  -. 풀었던 문제를 풀고, 조금 조금씩 새로운 문제를 넓혀가면서 공부하면 좋을 것 같다.

13. 문제유형이 궁금합니다.
  -. 완전탐색
  -. 구현/시뮬레이션
  -. DFS/BFS
  -. 문자열/해시테이블
  -. 힙/다익스트라
  -. DP (어렵고 많이는 안나옴, 후 순위)

14. 문제를 볼때 input, output, 제약조건을 먼저 보는게 좋다.

15. www.nossi.dev에 교재 순서가 있는데 그대로 따라서 순서대로 공부하면 좋을 것 같음.

16. 재귀나 백트레이킹문제의 경우 시간복잡도가 구하기 어려워서 애초에 안구하는게 맞고 그외에는 계산하는 연습 하는것도 좋다.

17. 코테사이트 leetcode vs 백준 vs 프로그래머스
  -. 강의는 프로그래머스 고득점kit 정도 추천


--------------------------------------------------- 녹화 본 추후에 유투브에 업로드 하겠다.
16. 유튜브 class.nossi.dev에 올리겠다. or https://class.nossi.dev/ or https://midi-mandolin-36f.notion.site/20240221-189bfe4aae0a4e6492957da12d9e9ca5?pvs=4













