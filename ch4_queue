1. 큐는 줄을 서다라는 뜻이 있다. 큐는 먼저 들어간 데이터가 먼저나오는 선입선출이다. 
2. 큐의 동작순서
  2.1 isFull() 연산으로 현재 큐가 가득 찼는지 확인
  2.2 가득차지 않았을 경우 rear를 +=1 한다음에 가르키는 위치에 데이터(3)을 푸시
  2.3 이 상태에서 POP을 하게 된다면 우선 isEmpty() 연산을 통해 큐가 비었는지 확인한다. isEmpty() 연산은 front와 rear의 값이 같은지 확인하는 과정이다.
  2.4 만약에 비어있지 않다면 front를 += 1 한다.
  2.5 그렇다면 rear와 front가 같다고 판단되어 실제 배열의 데이터를 삭제하지 않아도 데이터를 삭제한것처럼 인식한다.

  2.6 그렇다면 5, 6, 8을 연달아 푸시하면 isFull()을 수행하여 front 0, rear은 3이 된다. 이 상황에서 max사이즈는 3이라고 한다면.
  2.7 실제 저장된 데이터는 3, 5, 6, 8이지만 사용하는건 5, 6, 8이다 그리하여 front이전을 기준으로 큐의 사용할 수 있는 부분과 사용할 수 없는 부분이 나뉘어져 있다.
  그치만 파이썬에서는 리스트이 길이를 자동으로 관리하기 떄문에 메모리를 효율적으로 쓰기 위해 원형 큐를 사용할 필요가 없다.  

3. 파이썬에서 큐를 구현하기.
  3.1 푸시 연산은 append()를 활용하고 팝 연산은 pop()를 이용한다. 스텍과 다른점이 있다면, pop()메서드에 인수로 0을 넣는다. 
  3.2 pop()메서드의 인수를 넣지 않으면 맨 뒤에 있는 원소가 삭제되어 인수를 꼭넣어야 한다.

4. 구현

  queue = []

  큐에 데이터 추가 
  queue.append(1)
  queue.append(2)
  queue.append(3)

  first_item = queue.pop(0)
  print(first_item) # 1

  queue.append(4)
  queue.append(5)

 first_item = queue.pop(0)
  print(first_item) # 2

5. 덱을 큐처럼 활용하기 덱은 양 끝에서 삽입이나 삭제할 수 있는 큐를 구현한것이다. 양끝에서 삽입이나 삭제를 할 수 있다는 특징으로 큐를 구현할 때는 덱을 사용하는게 좋다.

  from collections import deque
  queue = deque()

  queue.append(1)
  queue.append(2)
  queue.append(3)

  first_item = =queue.popleft()
  print(first_itme) #1

  queue.append(4)
  queue.append(5)

  first_item = = queue.popleft()
  print(first_itme) #2

6. pop(0)과 popleft()의 성능 비교하기
  -. 10만 개의 데이터를 각각 연산한다면 100배 정도로 시간차이가 날정도로 popleft()가 성능면에서 우월하다.

7. 마지막 남은 사람 구하기.
from collections import deque
def solution(N,K):
  queue = deque(range(1, N+1))
  while len(queue) > 1:
    for _ in range(K -1):
      queue.append(queue.leftpop())
    queue.popleft()
  return queue[0]

8. 작업진행속도에 따른 완료예정일

import math

def solution(progresses, speeds):
    answer = []
    n = len(progresses)

    day_left = [math.ceil((100 - progresses[i]) / speeds[i]) for i in range(n)]
    count = 1
    max_day = day_left[0]

    for i in range(1, n):
        if day_left[i] <= max_day:
            count += 1
        else:
            answer.append(count)
            max_day = day_left[i]
            count = 1  # Reset count to 1 for the new feature being deployed
    answer.append(count)  # Append the last count

  return answer






    
