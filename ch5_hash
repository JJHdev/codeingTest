1. 해쉬구조는 어떠한 값이 저장되는 위치를 어떤 규칙으로 정할 수 있다면 굳이 탐색을 할 필요 없이 바로 데이터를 찾아낼 수 있다. 이것을 바탕으로 만든것이다.
2. 해시는 해시 함수를 사용해서 변환한 값을 인덱스로 삼아 키와 값을 저장해서 빠른 데이터 탐색을 제공하는 자료구조이다. 

3. 키:key >> 키를 이용해서 찾는다(해시 함수 내부구조로 해시 주소 반환) >> 해시테이블에서 해시주소로 해당 값(버킷)을 찾아 반환
4. 위에서 언급한 해시 함수는 어떻게 구현할까? 이로 인해 고려해야할 것들이 있다. (파이썬에서 딕셔너리와 거의 같음) 해쉬의 알고리즘에 대해서 이해하자면
  -. 해시 함수가 변환한 값은 인덱스이므로 해시테이블의 크기를 넘어서면 안된다.
  -. 해시 함수가 변환한 값의 충돌은 최대한 적게 발생해야 한다. 충돌의 의미는 서로 다른 서로 다른 두 키에 대해 해싱 함수를 적용한 결과가 돌이한 것을 의미 한다.


5. 두수 합이 target인 수 찾기 
  -. tip : a+b = target 이면  target - b = a 로 해서 a가 해쉬테이블에 있는지 찾기!
  -. hashtable에는 K이하 자연수 1~ K까지 모든수를 넣고 넘어온 배열은 값을 1로 해서 키핑하기 
def count_sort(arr, k):
  hashtable = [0] * (k+1)

  for num in arr:
    if num <= k:
      hashtable[num] = 1
  return hashtable

def solution(arr, target):
  hashtable = count_sort(arr , target)

  for num in arr:
    complemnet = target - num
    if (
      complement != num
      and complement >= 0 
      and complemnet <= target
      and hashtable[complement] == 1
    )
    return true 
  return false


6. 



















    
