1. 배열 (인덱스와 값을 1:1 대응해 관리하는 자료구조이다.)
  -. 배열선언 
    1.1 arr = [0,0,0,0,0]            =>> [0,0,0,0,0]
    1.2 arr = [0]*5                  =>> [0,0,0,0,0]
    1.3 arr = list(range(5))         =>> [0,1,2,3,4]
    1.4 arr = [0 for _ in range(5)]  =>> [0,0,0,0,0]
  -. 배열은 차원과는 무관하게 메모리에 연속 할당 된다. (1차원, 2차원, 3차원 배열도 실체로는 1차원 공간에 저장)

2. 1차원 배열 : arr[0] ~ arr[6]
3. 2차원 배열 : arr = [[1,2,3,4] , [5,6,7,8], [9,10,11,12]]
  -. arr[2][3] =>> 12
  -. arr[2][3] = 15 (값 할당)
  -. 리스트 컴프리헨션을 활용하여 선언 arr = [[i]*4 for i in range(3)] =>> [[0,0,0,0],[1,1,1,1],[2,2,2,2]]

4. 배열의 데이터를 접근할때에는 임의접근 방법으로 배열의 모든 위치에 있는 데이터를 한번에 접근 가능하여 O(1) 이다.
  -. 맨 뒤에 삽입할 경우 arr[3] = 1 >> O(1)
  -. 맨 앞에 삽입할 경우 arr[0] = 1 >> 모든 데이터가 한칸 뒤로 밀려나므로 O(N) 이다.
  -. 중간에 데이터를 사입할 경우 arr[2] = 3 >> 모든 데이터가 한칸 뒤로 밀려나므로 O(N) 이다.
  >> 배열은 데이터를 추가 삭제할 경우 드는 비용이 O(N)으로 많이 든다. 그러니 이런 비용을 생각해서 맨처음 초기화시 잘 생각해서 진행해야한다.
  -. 배열의 할당할 수 있는 메모리 크기를 확인해야 한다. 1차원 배열은 1000만개, 2차원 배열은 3000*3000 크기를 최대로 생각해야한다.
  -. 배열은 선형 자료구조 이기 때문에 중간이나 처음에 데이터를 빈번하게 삽입하면 시간복잡도가 높아져 실제 시험에서 시간 초과가 발생할수 있다.

  4.1 리스트 문법
    -. 맨뒤에 리스트 데이터 추가하기 
          my_list = [1,2,3]
       1. my_list.append(4)  # [1,2,3,4]
       2. my_list = mylist + [5,6] # [1,2,3,4,5,6]

    -. 특정 위치에 데이터를 넣고 나머지 데이터는 뒤로 밀리기
         my_list = [1,2,3,4,5]
      1. my_list.insert(2,9999) #[1,2,9999,4,5]

    -. 리스트에서 데이터 삭제하기.
         my_list = [1,2,3,4,5]
      1. popped_element = my_list.pop(2)  // poped_element >> # [3]  // my_list #[1,2,4,5]
      2. my_list2 = [1,2,3,2,4,5]
         my_list2.remove(2) # [1,3,2,4,5]

    -. 리스트에 제곱연산 적용
      numbers = [1,2,3,4,5]
      squares = [num**2 for num in numbers]   // numbers # [1,2,3,4,5] // squares # [1,4,9,16,25]

    -. 그외 문법
      > 리스트의 전체 데이터 개수를 반환 len()
      > 특정데이터가 처음 등장한 인덱스를 반환하는 index() 메서드, 없으면 -1 반환
      > 사용자가 정한 기준에 따라 리스트 데이터를 정렬하는 sort() 메서드
      > 특정 데이터 개수를 반환하는 count() 메서드

      ex) 
      fruits = ["apple", "banana", "cherry", "apple", "orange", "banana", "kiwi"]
      len(fruits)  #7
      fruits.index("banana") #1
      fruites.sort() # ["apple", "apple" "banana","banana", "cherry",  "kiwi", "orange"]
      fruites.sort(reverse=True) 역순
      fruites.count("apple") # 2


TIP
  -. arr.sort() 는 정순으로 배열을 만들지만 arr를 그대로 두고 싶다면. sorted_list = list(sort(arr)) 로 하면 sort는 지켜진다.
  -. 배열에서 순서를 바꾸는 방법은 arr[i] , arr[i+1] = arr[i+1] , arr[i]으로 서로의 위치를 바꿀수 있다.




      
